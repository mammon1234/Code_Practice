public class Solution {
    HashMap<Integer,Integer> cache = new HashMap<Integer, Integer>();
    public int numSquares(int n) {
        if(cache.containsKey(n)) return cache.get(n);
        int result = n;
        int ceiling = (int) Math.sqrt(n);
        for(int i = ceiling; i > 0; i--){
            int temp = numSquares( n- i*i);
            if(temp + 1 < result){
                result =  temp + 1;
            }
            if( result <= 2){
                break;
            }
        }
        cache.put(n,result);
        return result;
    }
}
//
public class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n+1];
        for (int i = 0; i <= n; i++) {
            dp[i] = i;
            for (int j = 0; j*j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i-j*j]+1);
            }
        }
        return dp[n];
    }
}
//
public class Solution {
    /**
     * @param n a positive integer
     * @return an integer
     */
    public int numSquares(int n) {
        // Write your code here
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        for(int i = 0; i * i <= n; ++i)
            dp[i * i] = 1;

        for (int i = 0; i <= n; ++i)
            for (int j = 0; i + j * j <= n; ++j)
                dp[i + j * j] = Math.min(dp[i] + 1, dp[i + j * j]);

        return dp[n];
    }
}
