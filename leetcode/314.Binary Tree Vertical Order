Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples:

Given binary tree [3,9,20,null,null,15,7],
   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7
return its vertical order traversal as:
[
  [9],
  [3,15],
  [20],
  [7]
]
Given binary tree [3,9,8,4,0,1,7],
     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
return its vertical order traversal as:
[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
Given binary tree [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5),
     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2
return its vertical order traversal as:
[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// no order of sort
public class Solution {
    HashMap<Integer, ArrayList> rank = new HashMap<Integer, ArrayList>();
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        if(root == null){
            return ans;
        }
        traverse( root, 0);
        int pos = 0;
        while(rank.containsKey(pos) == true){pos--;}
        for(int i=pos+1; rank.containsKey(i);i++){
            ans.add(new ArrayList<Integer>(rank.get(i)));
        }
        return ans;
    }
    private void traverse(TreeNode curr, int pos){
        if( curr == null){
            return;
        }
        if(rank.containsKey(pos) == false){
            rank.put(pos, new ArrayList<Integer>());
        }
        rank.get(pos).add(curr.val);
        traverse(curr.left,pos-1);
        traverse(curr.right,pos+1);
    }
}
