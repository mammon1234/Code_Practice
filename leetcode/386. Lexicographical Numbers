//recursive
public class Solution {
    private List<Integer> res;
    private int n;
    public List<Integer> lexicalOrder(int n) {
        this.res = new ArrayList<Integer>();
        this.n = n;
        helper(1);
        return res;
    }
    private void helper(int m){
        res.add(m);
        if(m*10 <= n) helper(m*10);
        if(m < n && m%10 <9) helper(m+1);
    }
}

//iterative Method
public class Solution {

    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<Integer>();
        if(n <=0){
            return res;
        }
        Stack<Integer> st= new Stack<Integer>();
        st.push(1);
        while(!st.isEmpty()){
            Integer tmp = st.pop();
            res.add(tmp);
            if(tmp < n && tmp % 10<9) st.push(tmp+1);
            if(tmp*10<=n) st.push(tmp*10);
        }
        return res;
    }
}
