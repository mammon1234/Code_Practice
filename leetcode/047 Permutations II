public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        if( nums == null || nums.length == 0){
            return ans;
        }
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<Integer>();
        int [] visited = new int [ nums.length ];
        permutedfs( ans, list, nums, visited);
        return ans;
    }
    private void permutedfs( List<List<Integer>> ans, List<Integer> list, int[] nums, int[] visited){
        if( list.size() == nums.length){
            ans.add(new ArrayList<Integer>(list));
            return;
        }
        for( int i = 0; i < nums.length; i ++ ){
            if( visited[i] ==1 || ( i != 0 && nums[i] == nums[i-1] && visited[i-1] == 0)){
                continue;
        }
        visited[i] = 1;
        list.add(nums[i]);
        permutedfs( ans, list, nums, visited);
        list.remove( list.size()-1);
        visited[i] = 0;
        }
    }
}
