/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
       if( root == null ){
            return ans;
        }
        traverse(root, ans);
        return ans;
    }
    private void traverse( TreeNode root, ArrayList<Integer> ans){
        if( root == null){
            return;
        }
        ans.add(root.val);
        traverse(root.left, ans);
        traverse(root.right,ans);
    }
}
//iteration
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode> ();
        List<Integer> ans =new ArrayList<Integer> ();
        if( root != null){
            stack.push(root);
        }
        while( !stack.isEmpty() ){
            TreeNode cur = stack.pop();
            ans.add( cur.val);
            if(cur.right != null){
                stack.push(cur.right);
            }
            if( cur.left !=null){
                stack.push(cur.left);
            }
        }
        return ans;
    }
}
