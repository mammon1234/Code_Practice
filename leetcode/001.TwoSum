//brute force O(n^2) time, O(1)space
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        if(nums == null || nums.length < 2){
            return ans;
        }
        for(int i = 0 ; i < nums.length - 1; i++){
            for(int j = i+1; j < nums.length; j++){
                if( nums[i]+nums[j] == target){
                    ans[0] = i;
                    ans[1] = j;
                }
            }
        }
        return ans;
    }
}
//考虑到这里要返回位置信息。用双指针做法，反而无法达到预期效果。
//用HASHMAP，O(n)time, O(n)space
public class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans = new int[2];
        if(nums ==null || nums.length <2){
            return ans;
        }
        Map<Integer, Integer> temp = new HashMap<Integer, Integer>();
        for(int i=0;i<nums.length;i++){
            int res = target - nums[i];
            if(temp.containsKey(res)){
                ans[0]=temp.get(res);
                ans[1]=i;
                break;
            }else{
                temp.put(nums[i],i);
            }
        }
        return ans;
    }
}
