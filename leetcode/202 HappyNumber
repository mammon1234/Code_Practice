Math Hashtable
//Iteration
public class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> hs = new HashSet<Integer>();
        while(hs.add(n)){
            if(n == 1){
                return true;
            }
            n = trans(n);
        }
        return false;
        //while(hs.add(n)) n=trans(n);
        return n==1 ? true:false;
    }
    private int trans(int n){
        int sum = 0;
        while(n != 0){
            int res= n%10;
            sum+=res*res;
            n=n/10;
        }
        return sum;
    }
}


//Recursion

public class Solution {
    HashSet<Integer> hs;
    Solution(){
        hs = new HashSet<Integer>();
    }
    public boolean isHappy(int n) {
        if(n ==1) return true;
        if(!hs.add(n)) return false;
        return isHappy(trans(n));
    }
    private int trans(int n){
        int sum = 0;
        while(n != 0){
            int res= n%10;
            sum+=res*res;
            n=n/10;
        }
        return sum;
    }
}

public class Solution {
    HashMap<Integer,Boolean> hm;
    Solution(){
        hm = new HashMap<Integer,Boolean>();
        hm.put(1,true);
    }
    public boolean isHappy(int n) {
        if(hm.containsKey(n)){
            return hm.get(n);
        }
        hm.put(n,false);
        boolean alter = isHappy(trans(n));
        if(alter) hm.put(n,alter);
        return alter;
    }
    private int trans(int n){
        int sum = 0;
        while(n != 0){
            int res= n%10;
            sum+=res*res;
            n=n/10;
        }
        return sum;
    }
}
