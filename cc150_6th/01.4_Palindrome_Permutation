//hashset
public boolean canPermutePalindrome(String s) {
    if(s == null || s.length() <=1){
        return true;
    }
    s.toLowerCase();
    HashSet<Character> hs = new HashSet<Character>();
    for(int i=0; i<s.length(); i++){
        Character c = s.charAt(i);
        if(hs.contains(c)){
            hs.remove(c);
        }else{
            hs.add(c);
        }
    }
    return hs.size() <=1;
}

//计算奇偶数
public class Solution {
    public boolean canPermutePalindrome(String s) {
        if(s == null || s.length() <=1){
            return true;
        }
        s.toLowerCase();
        int countodd =0;
        int[] dict = new int[256];
        for(int i=0; i<s.length(); i++){
            int c = s.charAt(i);
            dict[c]++;
            if( (dict[c] & 1) == 1){
                countodd++;
            }else{
                countodd--;
            }
        }
        return countodd <=1;
    }
}

//当条件进一步限定到26个字母时可用bit操作
public class Solution {
    public boolean canPermutePalindrome(String s) {
        if(s == null || s.length() <=1){
            return true;
        }
        int bitvector =0;
        s.toLowerCase();
        for(int i=0; i<s.length(); i++){
            int c = s.charAt(i);
            bitvector ^= (1 << c);
        }
        //利用x & ( x-1 ) == 0来判断数字中含有小于一个1，注意 &操作低于==要加括号
        return (bitvector & (bitvector-1)) ==0;
    }
}
