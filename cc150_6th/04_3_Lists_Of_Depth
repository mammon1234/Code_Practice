//BFS two Queue
public ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root){
	ArrayList<LinkedList<TreeNode>> result = new ArrayList<LinkedList<TreeNode>>();
	LinkedList<TreeNode> cur = new LinkedList<TreeNode>();

	//Two Queue
	if(root != null){
		cur.add(root);
	}

	while(cur.size() >0){
		result.add(cur);
		LinkedList<TreeNode> parents = cur;

		cur = new LinkedList<TreeNode>();
		for(TreeNode parent : parents){
			if(parent.left != null) cur.add(parent.left);

			if(parent.right != null) cur.add(parent.right);
		}
	}
	return result;
}

//DFS
public ArrayList<LinkedList<TreeNode>> createLevelLinkedList(TreeNode root){
	ArrayList<LinkedList<TreeNode>> lists = new ArrayList<LinkedList(TreeNode)>>();
	LevelLinkedList(root,lists,0);
	return list;
}
public void LevelLinkedList(TreeNode root, ArrayList<LinkedList<treeNode>> lists, int level){
	if(root == null) return;
	LinkedList<TreeNode> list = null;
	if(lists.size() == level){
		list = new LinkedList<TreeNode>();
		lists.add(list);
	}else{
		list = lists.get(level);
	}
	list.add(root);
	createLevelLinkedList(root.left, lists, level+1);
	createLevelLinkdeList(root.right, lists, level+1);
}
