public class BuildOrder{
	public static List<Integer> buildOrder(int[][] processes){
		Set<Integer> temporaryMarks = new HashSet<>();
		Set<Integer> permanentMarks = new HashSet<>();
		List<Integer> results = new LinkedList<>();

		//Recursively search from unmarked node
		for(int i=0; i<processes.length; i++){
			if(!permanentMarks.contains(i)){
				visit(i,processes,temporaryMarks,permanentMarks,result);
			}
		}
		return result;
	}

	//
	public void visit(int process, int[][] processes, Set<Integer> temporaryMarks, Set<Integer> permanentMarks, List<Integer> result){
		if(temporaryMarks.contains(process)){
			throw new RuntimeException("Graph is not acyclic");
		}

		if(!permanentMarks.contains(process)){
			temporaryMarks.add(process);

			for(int i : processes[process]){
				visit(i, process, temporaryMarks, permanentMarks, result);
			}

			permanentMarks.add(process);
			temporaryMarks.remove(process);
			result.add(process);
		}
	}
	
	    public static void main(String[] args) {
        assert compareResults(buildOrder(new int[][]{{}, {0}, {1}, {2}, {3}}), 
                              new int[]{0, 1, 2, 3, 4}):
            "Simple sorted order";
        assert compareResults(buildOrder(new int[][]{{}, {0}, {0}, {1, 2}, {1, 2, 3}}),
                              new int[]{0, 1, 2, 3, 4}):
            "Complex sorted order";
        assert compareResults(buildOrder(new int[][]{{3}, {0}, {4}, {}, {1}}),
                              new int[]{3, 0, 1, 4, 2}):
            "Simple unsorted order";
        assert compareResults(buildOrder(new int[][]{{3}, {0, 3}, {0, 1, 3}, {}, {1, 2, 3}}),
                              new int[]{3, 0, 1, 2, 4}):
            "Complex unsorted order";
        try {
            buildOrder(new int[][]{{1}, {0}});
            assert false:
                "Throw error on cycle";
        } catch (Exception e) {
        }
        System.out.println("Passed all test cases");
    }
    
    // Helper method for tests. Checks if lists have equal values
    private static boolean compareResults(List<Integer> a, int[] b) {
        if (a.size() != b.length) return false;
        for (int i = 0; i < a.size(); i++) {
            if (a.get(i) != b[i]) return false;
        }
        
        return true;
    }
}
