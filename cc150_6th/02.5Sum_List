//Reverse Order
public class Solution{
	public ListNode addTwoNumbers(ListNode l1, ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;

		ListNode dummy = new ListNode(0);
		ListNode cur = dummy;

		int res =0, car =0;

		while(l1 != null && l2 != null){
			res = (l1.val +l2.val + car) %10;
			car = (l1.val + l2.val + car) /10;
			ListNode temp = new ListNode(res);
			cur.next = temp;
			cur = cur.next;
			l1 = l1.next;
			l2= l2.next;
		}

		ListNode head = l1;
		if(l1 == null){
			head = l2;	
		}

		while(head != null){
			res = (head.val+ car)%10;
			car = (head.val+car)/10;
			ListNode temp = new ListNode(res);
			cur.next = temp;
			cur = cur.next;
			head = head.next;
		}

		if(cur != 0){
			ListNode temp = new ListNode(car);
			cur.next = temp;
			cur = cur.next;
		}
		cur.next= null;
		return dummy.next;
	}
}

// 
public ListNode add(ListNode l1, ListNode l2){
	if(l1 == null) return l2;
	if(l2 == null) return l1;

	Stack<Integer> s1 = new Stack<>();
	Stack<Integer> s2 = new Stack<>();

	while(l1!= null){
		s1.push(l1.val);
		l1=l1.next;
	}
	while(l2!=null){
		s2.push(l2.val);
		l2=l2.next;
	}

	int v1=0,v2=0,res=0, car=0;
	ListNode dummy= new ListNode(0);
	ListNode after = null;
	while(!s1.isEmpty() && !s2.isEmpty()){
		v1=s1.pop();
		v2=s2.pop();
		res = (v1+v2+car) %10;
		car = (v1+v2+car) /10;
		ListNode temp = new ListNode(res);
		dummy.next = temp;
		temp.next = after;
		after = temp;
	}

	while(!s1.isEmpty()){
		v1=s1.pop();
		res = (v1+car) %10;
		car = (v1+car) /10;
		ListNode temp = new ListNode(res);
		dummy.next = temp;
		temp.next = after;
		after = temp;
	}
	while(!s2.isEmpty()){
		v2=s2.pop();
		res = (v2+car) %10;
		car = (v2+car) /10;
		ListNode temp = new ListNode(res);
		dummy.next = temp;
		temp.next = after;
		after = temp;
	}

	if(car != 0){
		ListNode temp = new ListNode(car);
		dummy.next = temp;
		temp.next = after;
		after = temp;
	}
	return dummy.next;
}
