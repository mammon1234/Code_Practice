public FixedMultiStack(int Size){
	private int numOfStacks = 3;
	private int stackCapacity;
	private int[] values;
	private int[] sizes;

	public FixedMultiStack(int Size){
		stackCapacity = Size;
		values = new int[stackCapacity * numOfStacks];
		sizes = new int[numOfStacks];
	}

	// Push value into certain stack
	public void push(int stackNum, int value)throws FullStackException{
		if(isFull(stackNum)) throw new FullStackException();

		sizes[stackNum]++;
		values[indexOfTop(stackNUm)] = value;
	}

	public boolean isFull(int stackNum){
		return sizes[stackNum] == stackCapacity;
	}
	//return the index of Certain Stack
	private int indexOfTop(int stackNum){
		return stackNum*stackCapacity + sizes[stackNum] -1;
	}

	// return if stackNum is empty
	public boolean isEmpty(int stackNum){
		return sizes[stackNum] == 0;
	}

	public int peek(int stackNum) throws EmptyStackException{
		if(isEmpty(stackNum)) throw new EmptyStackException();
		return values[indexOfTop(stackNum)];
	}

	public int[] getvalues(){
		return values;
	}
}

public class FullStackException extends Exception{
	private static final long serialVersionUID = 1L;

	public FullStackException(){
		super();
	}
	public FullStackException(String message){
		super(message);
	}
}

///
public class MultiStack{
	//StackInfo is a simple class that holds a set of data about each stack
	private class StackInfo{
		public int start,size,capacity;
		
		public StackInfo(int start, int capacity){
			this.start = start;
			this.capacity = capacity;
		}
		
		//check if an index on the full array is within the stack
		//the stack can wrap around to the start of the array
		public boolean isWithinStackCapacity(int index){
			//if outside of bounds of arrays return false
			//values public variable
			if(index<0 || index>=values.length) return false;

			//if index wraps around, adjust it
			int contiguousIndex = index < start ? index + values.length : index;
			int end = start + capacity;
			return start <= contiguousIndex && contiguousIndex < end;
		}

		public int lastCapacityIndex(){
			return adjustIndex(start+capcity-1);
		}
		public int lastElementIndex(){
			return adjustIndex(start+size-1);
		}
		public boolean isFull(){
			return size == capacity;
		}
		public boolean isEmpty(){
			return size == 0;
		}
	}

	private StackInfo[] info;
	private int[] values;

	public MultiStack(int numOfStacks, int defaultSize){
		info = new StackInfo[numOfStacks];
		for(int i=0; i<numOfStacks; i++){
			info[i] = new StackInfo(defaultSize*i, defaultSize);
		}
		values = new int[numberOfStacks * defaultSize];
	}

	//Return the number ofitems actually present in stack
	public int numberOfElements(){
		int size =0;
		for(StackInfo sd : info){
			size +=sd.size;
		}
		return size;
	}

	public boolean allStackFull(){
		return numberofElements() == values.length;
	}

	private int adjustIndex(int index){
		//java mod operator.(-11 % 5) == -1 not 4
		int max = values.length;
		return ((index % max)+max) % max;
	}

	private int nextIndex(int index){
		return adjustIndex(index+1);
	}

	private int previousIndex(int index){
		return adjustIndex(index-1);
	}

	private void shift(int stackNum){
		System.out.println("///Shifting " + stackNum);
		StackInfo stack = info[stackNum];

		//if this stack is at its full capacity,then you need to move the next stack 
		//over by one element
		if(stack.size >= stack.capacity){
			int nextStack = (stackNum + 1) %info.length;
			shift(nextStack);
			stack.capacity++;
		}

		//Shift all elements in stack over by one;
		int index = stack.lastCapacityIndex();
		while(stack.isWithinStackCapacity(index)){
			values[index] = values[previousIndex(index)];
			index = previousIndex(index);
		}

		//Adjust stack data
		values[stack.start] = 0;
		stack.start = nextIndex(stack.start);
		stack.capacity--;
	}

	private void expand(int stackNum){
		System.out.println("///Expanding stack "+ stackNum);
		shift((stackNUm + 1) % info.length);
		info[stackNum].capacity++;
	}

	public void push(int stackNum, int value) throws FullStackException{
		System.out.println("///Pushing stack " + stackNum + ": " +value);
		if(allStacksAreFull()) throws FullStackException();

		StackInfo stack = info[stackNum];
		if(stack.isFull()){
			expand(stackNum);
		}

		stack.size++;
		values[stack.lastElementIndex()] = value;
	}

	public int pop(int stackNum) throws Exception{
		System.out.println("//Popping stack " + stackNum);
		StackInfo stack = info[stackNum];
		if(stack.isEmpty()){
			throw new EmptyStackException();
		}

		int value = values[stack.lastElementIndex()];
		values[stack.lastElementIndex()] = 0;
		stack.size--;
		return value;
	}

	public int peek(int stackNum){
		StackInfo stack = info[stackNum];
		return values[stack.lastElementIndex()];
	}

	public int[] getValues(){
		return values;
	}

	public int[] getStackValues(int stackNum){
		StackInfo stack = info[stackNum];
		int[] items = new int[stack.size];
		for(int i=0; i<items.length; i++){
			items[i] = values[adjustIndex(stack,start+i)];
		}
		return items;
	}

	public String stackToString(int stackNum){
		int[] items = getStackValues(stackNum);
		eturn stackNum + ": " +AssortedMethods.arrayToString(items);
	}
}
