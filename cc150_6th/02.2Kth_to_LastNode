/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: Nth to last node of a singly linked list. 
     */
    ListNode nthToLast(ListNode head, int n) {
        // write your code here
        if(head == null){
            return head;
        }
        ListNode cur = head;
        ListNode fast = head;
        for(int i =0 ; i<n-1; i++){
            fast = fast.next;
        }
        while(fast.next != null){
            cur = cur.next;
            fast = fast.next;
        }
        return cur;
    }
}
//recursive
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: Nth to last node of a singly linked list. 
     */
     //全局变量声明一次。
    public static int index;
    ListNode nthToLast(ListNode head, int n) {
        // write your code here
        if(head == null){
            return head;
        }
        index = 0;
        return nth(head,n);
    }
    private ListNode nth(ListNode head, int n){
        if(head == null){
            return null;
        }
        ListNode node = nth(head.next, n);
        index=index+1;
        if(index == n){
            return head;
        }
        return node;
    }
}
//或者用内部类来定义全局变量
public class Solution {
    /**
     * @param head: The first node of linked list.
     * @param n: An integer.
     * @return: Nth to last node of a singly linked list. 
     */
    class index{
        public int value =0;
    }
    ListNode nthToLast(ListNode head, int n) {
        // write your code here
        if(head == null){
            return head;
        }
        index id= new index();
        return nth(head,n,id);
    }
    private ListNode nth(ListNode head, int n,index id){
        if(head == null){
            return null;
        }
        ListNode node = nth(head.next, n, id);
        id.value=id.value+1;
        if(id.value == n){
            return head;
        }
        return node;
    }
}
