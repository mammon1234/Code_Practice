/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root the root of binary tree
     * @param target an integer
     * @return all valid paths
     */
    public List<List<Integer>> binaryTreePathSum(TreeNode root, int target) {
        // Write your code here
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> sol = new ArrayList<Integer>();
        if(root != null){
            subdfs(ans, sol, root, target);
        }
        return ans;
    }
    private void subdfs(List<List<Integer>> ans, List<Integer> sol, TreeNode root, int target){
        if(root == null){
            return;
        }
        target -= root.val;
        sol.add( root.val);
        if( target == 0 && root.left == null && root.right == null){
            ans.add( new ArrayList<Integer>(sol));
        }
        if(root.left != null){
            subdfs(ans, sol, root.left, target);
        }
        if(root.right != null){
            subdfs(ans, sol, root.right, target);
        }
        sol.remove(sol.size()-1);
    }
}
