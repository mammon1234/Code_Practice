/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Postorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> ans = new ArrayList<Integer>();
        if( root == null){
            return ans;
        }
        subdfs(ans, root);
        return ans;
    }
    private void subdfs(ArrayList<Integer> ans, TreeNode root){
        if(root == null){
            return;
        }
        if(root.left != null){
            subdfs(ans,root.left);
        }
        if(root.right != null){
            subdfs(ans, root.right);
        }
        ans.add(root.val);
    }
}
//
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Postorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(root == null){
            return res;
        }
        Stack<TreeNode> stack = new Stack<TreeNode>();
        TreeNode prev = null;
        TreeNode curr = root;
        stack.push(root);
        while(!stack.isEmpty()){
            curr = stack.peek();
            if(prev == null||prev.left == curr || prev.right == curr){
                if(curr.left != null){
                    stack.push(curr.left);
                }else if( curr.right != null){
                    stack.push(curr.right);
                }
            }else if(curr.left == prev){
                if(curr.right != null){
                    stack.push(curr.right);
                }
            }else{
                res.add(curr.val);
                stack.pop();
            }
            prev = curr;
        }
        return res;
    }
}
