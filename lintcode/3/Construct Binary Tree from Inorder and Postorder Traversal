/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param inorder : A list of integers that inorder traversal of a tree
     *@param postorder : A list of integers that postorder traversal of a tree
     *@return : Root of a tree
     */
    int postEnd;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        // write your code here
        if(inorder.length == 0 || postorder.length == 0 || inorder.length != postorder.length){
            return null;
        }
        postEnd = postorder.length-1;
        return helper(inorder, postorder, 0, inorder.length -1);
    }
    private TreeNode helper( int[] inorder, int[] postorder, int inStart, int inEnd){
        if(postEnd < 0 || inStart >inEnd) return null;
        int index = 0;
        for(int i =0; i < postorder.length;i++){
            if(inorder[i] == postorder[postEnd]){
                index = i;
                break;
            }
        }
        TreeNode root = new TreeNode(postorder[postEnd--]);
        root.right = helper(inorder,postorder,index+1,inEnd);
        root.left = helper(inorder,postorder,inStart,index-1);
        return root;
    }
}
