public class Solution {
    /**
     * @param numbers : Give an array numbers of n integer
     * @return : Find all unique triplets in the array which gives the sum of zero.
     */
    public ArrayList<ArrayList<Integer>> threeSum(int[] numbers) {
        // write your code here
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if(numbers == null || numbers.length <3){
            return ans;
        }
        Arrays.sort(numbers);
        for(int i =0; i< numbers.length-2; i++){
            if(i!=0 && numbers[i]==numbers[i-1]){
                continue;
            }
            ArrayList<ArrayList<Integer>> res = twosum(numbers, i, 0-numbers[i]);
            ans.addAll(res);
        }
        return ans;
    }
    private ArrayList<ArrayList<Integer>> twosum(int[] numbers, int i, int target){
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        for(int j= i+1; j<numbers.length-1;j++){
            if(j!= i+1 && numbers[j] == numbers[j-1]){
                continue;
            }
            int end = numbers.length-1;
            while( j < end){
                if(numbers[j]+numbers[end] < target){
                    break;
                }
                if(numbers[j] + numbers[end] > target){
                    end--;
                }else{
                    ArrayList<Integer> temp = new ArrayList<Integer>();
                    temp.add(numbers[i]);
                    temp.add(numbers[j]);
                    temp.add(numbers[end]);
                    res.add(temp);
                    break;
                }
            }
        }
        return res;
    }
}
