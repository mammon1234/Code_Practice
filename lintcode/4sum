public class Solution {
    /**
     * @param numbers : Give an array numbersbers of n integer
     * @param target : you need to find four elements that's sum of target
     * @return : Find all unique quadruplets in the array which gives the sum of
     *           zero.
     */
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
         ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if(numbers == null || numbers.length < 4){
            return ans;
        }
        Arrays.sort(numbers);
        for(int i=0; i < numbers.length-3;i++){
            if(i!=0&& numbers[i]==numbers[i-1]){
                continue;
            }
            ArrayList<ArrayList<Integer>> res = threesum(numbers, i, target-numbers[i]);
            ans.addAll(res);
        }
        return ans;
    }
    private ArrayList<ArrayList<Integer>> threesum(int[]numbers, int i, int value){
        ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        for(int j = i+1; j<numbers.length-2;j++){
            if(j!=i+1 && numbers[j]==numbers[j-1]){
                continue;
            }
            ArrayList<ArrayList<Integer>> res2 = twosum(numbers,i,j,value-numbers[j]);
            res.addAll(res2);
        }
        return res;
    }
    private ArrayList<ArrayList<Integer>> twosum(int[]numbers, int i,int j,int value2){
        ArrayList<ArrayList<Integer>> res2 = new ArrayList<ArrayList<Integer>>();
        for(int k = j+1; k < numbers.length-1;k++){
            if(k!=j+1 && numbers[k]==numbers[k-1]){
                continue;
            }
            int end =  numbers.length-1;
            while(k<end){
                int sum = numbers[k]+numbers[end];
                if(sum < value2){
                    break;
                }
                if(sum > value2){
                    end--;
                }
                if(sum == value2){
                    ArrayList<Integer> temp = new ArrayList<Integer>();
                    temp.add(numbers[i]);
                    temp.add(numbers[j]);
                    temp.add(numbers[k]);
                    temp.add(numbers[end]);
                    res2.add(temp);
                    break;
                }
            }
        }
        return res2;
    }
}
