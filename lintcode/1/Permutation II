class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> nums){
        // write your code here
        ArrayList<ArrayList<Integer>> ans=new ArrayList<ArrayList<Integer>>();
        if( nums == null || nums.size() == 0 ){
            return ans;
        }
        Collections.sort( nums );
        ArrayList<Integer> list = new ArrayList<Integer>();
        int[] visited = new int [nums.size()];
        permutedfs( ans, list, nums, visited);
        return ans;
    }
    private void permutedfs( ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> list, ArrayList<Integer> nums, int[] visited){
        if(list.size() == nums.size()){
            ans.add(new ArrayList<Integer>(list));
            return;
        }
        for( int i = 0; i < nums.size(); i ++){
            if( visited[i] == 1 || ( i != 0 && nums.get(i) == nums.get(i-1) && visited[i-1] == 0 )){
                continue;
            }
            visited[i] = 1;
            list.add( nums.get(i));
            permutedfs( ans, list, nums, visited);
            list.remove(list.size()-1);
            visited[i] = 0;
        }
    }
}
