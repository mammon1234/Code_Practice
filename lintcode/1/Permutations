class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> nums) {
        // write your code here
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if( nums == null || nums.size() == 0){
            return ans;
        }
        ArrayList<Integer> list = new ArrayList<Integer>();
        permutedfs( ans, list, nums);
        return ans;
    }
    private void permutedfs( ArrayList<ArrayList<Integer>> ans, ArrayList<Integer> list, ArrayList<Integer> nums){
        if( list.size() == nums.size() ){
            ans.add( new ArrayList<Integer>(list));
            return;
        }
        for( int i = 0; i < nums.size(); i ++ ){
            if( list.contains(nums.get(i))){
                continue;
            }
            list.add(nums.get(i));
            permutedfs( ans, list, nums);
            list.remove( list.size() - 1);
        }
    }
}
